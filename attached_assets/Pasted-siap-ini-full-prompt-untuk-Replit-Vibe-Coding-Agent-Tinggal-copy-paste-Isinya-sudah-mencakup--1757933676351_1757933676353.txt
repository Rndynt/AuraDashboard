siap—ini **full prompt** untuk Replit Vibe Coding Agent. Tinggal copy-paste. Isinya sudah mencakup: modul **Dashboard** (sebagai module inti), **superuser full access** (tanpa hardcode), aturan **NO HARDCODE**, dokumentasi & checklist otomatis, ADR, RLS, RBAC, CI, test, dan verifikasi mandiri.

---

# 📋 Replit Agent Prompt — “Dashboard Starter Kit (DDD, Multi-Tenant, RLS, RBAC)”

> You are a senior platform engineer. Build a **reusable Dashboard Starter Kit** using **Node + TypeScript**, **Next.js App Router**, **Postgres + Drizzle**, strict **DDD Modular Monolith**, **multi-tenant with PostgreSQL RLS**, **RBAC**, **better-auth**, **observability**, and comprehensive **docs & checklists**.
> **Never hardcode** tenant IDs, permission checks, superuser logic, environment-dependent values, domains, or magic strings. Everything must be **dynamic, configurable, and covered by tests**.

---

## 0) Project Goals & Non-Functional Requirements

* Reusable **Dashboard Starter Kit** for future ideas. No business-specific domain.
* **Strict DDD**: domain/application/infrastructure/interface per module.
* **Multi-tenant isolation**: PostgreSQL **RLS** enabled by default.
* **RBAC** per tenant; **Superuser** has full access to **all tenants** via context switch (no RLS bypass).
* **Security-first**: CSP, HSTS, rate limiting, input validation, audit logs.
* **Observability**: OpenTelemetry (HTTP & DB), Sentry.
* **CI/CD**: lint, typecheck, unit, integration (testcontainers), E2E (Playwright), drizzle migrate dry-run.
* **Docs & Checklists**: always up-to-date; auto-sync script.
* **No hardcode**: all checks & values must be data/model driven.

---

## 1) Monorepo Layout (pnpm + Turborepo)

Create a pnpm monorepo:

```
apps/
  web/                         # Next.js (UI + API routes)
  worker/                      # (placeholder) jobs/outbox/cron
packages/
  core/                        # error/result, env, logger, telemetry, http utils
  db/                          # drizzle schema, migrations, seeds, test-helpers
  auth/                        # better-auth integration & session helpers
  rbac/                        # policy engine, permission keys, guards
  ui/                          # shadcn/ui, theme tokens, primitives
  config/                      # tsconfig, eslint, tailwind, turbo presets
  toolkit/                     # CLI: scaffold domain/usecase/repo/route/tests

  modules/
    dashboard/                 # << built-in dashboard module (pages/home/analytics/activity/settings)
      domain/
      application/
      infrastructure/
      interface/
    identity/                  # users, sessions, device sessions
      domain/
      application/
      infrastructure/
      interface/
    tenancy/                   # tenants, memberships, invitations, api-keys
      domain/
      application/
      infrastructure/
      interface/
    authorization/             # roles, permissions, role-permission, rbac
      domain/
      application/
      infrastructure/
      interface/
    audit/                     # audit logs
      domain/
      application/
      infrastructure/
      interface/
```

**Rules**:

* `domain` has **no** external deps (pure TS).
* `application` depends on `domain` only (ports/use-cases).
* `infrastructure` implements ports (Drizzle repos, adapters).
* `interface` (Next.js handlers/UI) calls **application**, never the DB.
* Use path aliases: `@acme/core`, `@acme/db`, `@acme/auth`, `@acme/rbac`, `@acme/ui`, `@acme/modules/<name>/<layer>`.

---

## 2) Core Foundation

* **Env loader** (zod-validated), **logger** (pino), **AppError/Result** helpers.
* **Telemetry**: OpenTelemetry init (HTTP server, fetch, pg/drizzle instrumentation), Sentry init (front+back).
* **RequestContext** via **AsyncLocalStorage**:

  * `ctx.userId?: string`
  * `ctx.tenantId?: string`
  * `ctx.isSuperuser?: boolean`
  * `ctx.permissions?: string[]`
* **Security headers**: CSP (with nonce), HSTS, X-Frame-Options, Referrer-Policy, CORP/COEP where applicable.
* **Rate Limiting**: Redis-based (per IP & per tenant) for `/api/auth/*` and admin endpoints.

---

## 3) Next.js App (apps/web)

* **App Router** with groups:

  * `/auth/*` (public) → login/register/reset
  * `/(app)/:tenant/*` (protected) → dashboard pages
  * `/api/*` (JSON) → route handlers calling application use-cases
* **Tenant Resolver Middleware**:

  * Resolve tenant from **subdomain** or `/:tenant` path.
  * Attach to `RequestContext` and to DB transaction via `SET LOCAL app.tenant_id`.
* **UI Shell** (shadcn/ui):

  * Sidebar nav (dynamic by permissions), topbar (tenant switcher, profile), breadcrumbs, dark/light theme.
  * Avoid hardcoded menu visibility — derive from **RBAC checks**.
* **Forms**: React Hook Form + Zod resolvers.
* **Server data**: TanStack Query for caching; route handlers for data.

---

## 4) Database & RLS (packages/db)

### Schemas (Drizzle)

Create tables (min set):

* `tenants(id, slug UNIQUE, name, status, created_at)`
* `users(id, email UNIQUE, name, password_hash, status, is_superuser BOOL, created_at)`
* `memberships(id, user_id, tenant_id, role_id, status, created_at)`
* `roles(id, tenant_id NULLABLE (NULL = global default), name, description)`
* `permissions(id, key UNIQUE, description)`
* `role_permissions(role_id, permission_id)`
* `invitations(id, tenant_id, email, role_id, token UNIQUE, expires_at, invited_by)`
* `api_keys(id, tenant_id, name, hash, scopes JSONB, last_used_at, created_at)`
* `sessions(id, user_id, user_agent, ip, expires_at, created_at)`
* `audit_logs(id, tenant_id, actor_user_id, action, resource, resource_id, meta JSONB, created_at)`

**Indexes**: add useful `(tenant_id, …)` composite indexes.

### RLS Activation

* For every **tenant-scoped** table: `ENABLE ROW LEVEL SECURITY`.
* Policies (generate via migration):

```sql
-- SELECT isolation
CREATE POLICY <table>_isolation_select
ON <table> FOR SELECT
USING (tenant_id = current_setting('app.tenant_id')::uuid);

-- Write isolation
CREATE POLICY <table>_isolation_write
ON <table> FOR ALL
USING (tenant_id = current_setting('app.tenant_id')::uuid)
WITH CHECK (tenant_id = current_setting('app.tenant_id')::uuid);
```

* **NEVER** grant `BYPASSRLS` to the app DB role.
* Provide a **DB helper** to wrap each request in a transaction that executes:

  * `SET LOCAL app.tenant_id = $1` with the resolved tenant.
* **Superuser** still uses RLS; to view **all tenants**, the UI provides a **tenant switcher** (admin can select any tenant and request runs with that tenant’s id). **Do not disable RLS**.

---

## 5) Auth (packages/auth)

* Integrate **better-auth**:

  * Register/login/logout/reset, session cookie httpOnly, refresh rotation.
  * Brute-force rate limit in handlers.
* **Superuser**:

  * Persisted in `users.is_superuser = true` (seed with env email).
  * **Application** layer: if `is_superuser`, **bypass RBAC checks** and allow switching into **any tenant** context via UI (Admin Panel).
  * Still **no RLS bypass**: superuser action runs under selected tenant’s `app.tenant_id`.
* **Session & Device management**: list/revoke active sessions.

---

## 6) RBAC (packages/rbac + modules/authorization)

* **Permission keys**: `resource.action` (e.g., `member.invite`, `tenant.update`).
* **Default roles** (global templates in `roles` with `tenant_id = NULL`):

  * `Owner`, `Admin`, `Member`, `Viewer`.
* **Seed**:

  * Generate permissions below and map them to roles (see CSV).
  * On tenant creation, **materialize** default roles/permissions into tenant.
* **Server guard**: `checkPermission(userId, tenantId, permissionKey)`; superuser returns `true`.
* **Client guard**: hide/disable menu/actions when not permitted (do not hardcode).

**Permission Matrix (CSV content to create as `docs/permission_matrix.csv`)**:

```csv
permission_key,description,roles_default
tenant.create,Create tenant,"Owner"
tenant.update,Update tenant,"Owner,Admin"
tenant.delete,Delete tenant,"Owner"
member.invite,Invite member,"Owner,Admin"
member.manage,Add/Remove/Change roles,"Owner,Admin"
member.view,View members,"Owner,Admin,Member,Viewer"
role.view,View roles/permissions,"Owner,Admin"
role.manage,Create/Update roles,"Owner"
audit.view,View audit logs,"Owner,Admin"
apikey.create,Create API keys,"Owner,Admin"
apikey.view,View API keys,"Owner,Admin"
apikey.revoke,Revoke API keys,"Owner,Admin"
profile.view,View own profile,"Owner,Admin,Member,Viewer"
profile.update,Update own profile,"Owner,Admin,Member,Viewer"
dashboard.view,View dashboard module,"Owner,Admin,Member,Viewer"
dashboard.settings.update,Update dashboard settings,"Owner,Admin"
```

---

## 7) Built-in **Dashboard Module** (modules/dashboard)

Provide a first-class module (DDD layers) with pages:

* **Home Overview**: quick stats placeholders (tenant name, member count, recent activity).
* **Analytics (stub)**: demonstrates data cards and charts (fake data).
* **Activity Stream**: reads from `audit_logs` (tenant-scoped).
* **Settings**: theme, language, profile shortcuts; guarded by `dashboard.settings.update`.
* **Onboarding checklist**: tenant creation steps.

UI navigation shows **Dashboard** as the first module. Gate access via `dashboard.view`.

---

## 8) Application & Interface Examples

* Provide **use cases** for:

  * `tenancy/create-tenant`
  * `tenancy/invite-member`
  * `authorization/get-role-matrix`
  * `audit/list-audit-logs`
  * `dashboard/get-overview`
* **Route Handlers** in `/app/api/*` consuming use cases, validating with Zod, applying rate limit, and writing audits.

---

## 9) Toolkit CLI (packages/toolkit)

Create a CLI: `pnpm gen:domain <name>` to scaffold a new bounded context with:

* `domain/entities`, `domain/value-objects`, `domain/events`, `domain/ports`
* `application/use-cases`, `application/dto`, `application/services`, `application/policies`
* `infrastructure/orm`, `infrastructure/repositories`, `infrastructure/mappers`, `infrastructure/adapters`
* `interface/http/routes`, `interface/http/presenters`
* basic **unit tests** and **integration test** skeletons
  **Never hardcode** paths or tenant logic—use shared helpers.

---

## 10) Observability

* **OpenTelemetry**:

  * Instrument incoming HTTP, Next.js route handlers, and Postgres/Drizzle.
  * Propagate trace IDs to logs (pino).
* **Sentry**:

  * Frontend (Next.js) and backend (API).
* **Health endpoints**:

  * `/api/_health` returns db connectivity, migration version.

---

## 11) Security

* **CSP** with nonce; apply nonce to inline scripts/styles.
* **HSTS**, **X-Frame-Options: DENY**, **Referrer-Policy: strict-origin-when-cross-origin**.
* **CORS** minimal; whitelist from env; **do not** hardcode origins.
* **Rate limit**: Redis token bucket; configurable via env.
* **Secrets** only via env; structure `env.ts` with zod schemas.
* **PII masking** in logs; never log secrets/tokens.
* **Idempotency** middleware for critical POSTs (header `Idempotency-Key`).

---

## 12) Testing Strategy

* **Unit (vitest)**: domain rules, value objects, use-cases.
* **Integration (vitest + testcontainers)**: repositories Drizzle with real Postgres.
* **E2E (Playwright)**:

  * register/login
  * create tenant
  * invite member
  * switch tenant
  * RBAC deny (Member cannot access admin)
  * superuser can switch to any tenant and access everything
* **RLS tests** (critical):

  * user A in tenant X cannot read/update data in tenant Y (ALL tables).
  * write rejection when `tenant_id` mismatched.
* **Coverage thresholds**: statements 80%, branches 75% minimum.

---

## 13) CI (GitHub Actions)

Jobs:

* **lint** (eslint), **typecheck** (tsc - noEmit)
* **unit** (vitest)
* **integration** (start Postgres service or testcontainers privileges)
* **e2e** (optional on PR labels)
* **build** (turbo)
* **migrate\:dry-run** (drizzle)
* **artifact** upload (dist, migrations report)

---

## 14) Documentation & Checklists (must generate & keep updated)

Create `/docs` with:

* `architecture_overview.md` — DDD layers, module boundaries, request flow diagram.
* `rls_checklist.md` — use content below (ensure synced).
* `security_checklist.md` — CSP, headers, rate limit, secrets, logging, PII.
* `features_checklist.md` — implementation checklist (below).
* `qa_release_checklist.md` — self-QA before release (below).
* `adr/` — Template + ADR-001..005 (filled).
* `permission_matrix.csv` — as above.

**Auto-sync script**:

* Add a node script `docs/sync.ts` that **regenerates**:

  * `features_checklist.md` based on current routes, permissions, and modules in `packages/modules/*`.
  * `rls_checklist.md` table list from Drizzle schemas with `tenant_id`.
* Hook it to `pnpm docs:sync` and run in CI (fail if drift).

**ADR Template (create `docs/adr/ADR-TEMPLATE.md`)**:

```
# ADR-XXX: <Title>
Date: YYYY-MM-DD
Status: Proposed | Accepted | Deprecated | Superseded by ADR-YYY

## Context
## Decision
## Consequences
## Alternatives Considered
## References
```

**Create and fill**:

* ADR-001 Modular Monolith DDD
* ADR-002 RLS Single-DB Strategy (vs schema-per-tenant)
* ADR-003 Next.js App Router + Route Handlers
* ADR-004 RBAC via Permission Keys
* ADR-005 OpenTelemetry + Sentry Stack

---

## 15) RLS Checklist (content for `docs/rls_checklist.md`)

```
# RLS Checklist

## Preparation
- [ ] All tenant data tables have `tenant_id UUID NOT NULL` + composite indexes.
- [ ] App DB role does NOT have BYPASSRLS.

## Activation
- [ ] RLS ENABLED on all tenant-scoped tables.
- [ ] Policies:
  - [ ] SELECT policy uses `current_setting('app.tenant_id')::uuid`.
  - [ ] WRITE policy (INSERT/UPDATE/DELETE) uses WITH CHECK with same expression.
- [ ] Transaction helper sets `SET LOCAL app.tenant_id = <tenant>` per request.

## App Guards
- [ ] Middleware resolves tenant; AsyncLocalStorage sets `ctx.tenantId`.
- [ ] Repo layer never accepts tenant_id from client; uses ctx only.
- [ ] Superuser does NOT bypass RLS; uses tenant switch to assume context.
- [ ] Tests cover cross-tenant access denial for each table.

## Audit & Monitoring
- [ ] Audit logs record `tenant_id`, `actor_user_id`, action, resource_id.
- [ ] Alerts for queries executed without `app.tenant_id` set.
```

---

## 16) Features Checklist (content for `docs/features_checklist.md`)

```
# Features Implementation Checklist

## Foundation
- [ ] Monorepo (pnpm + turbo) with apps and packages structure
- [ ] Config: tsconfig, eslint, prettier, husky, lint-staged
- [ ] Core: env (zod), logger, errors, result, telemetry init
- [ ] UI: shadcn/ui, shell (sidebar/topbar/breadcrumbs), theme

## Database & Seeds
- [ ] Drizzle schemas created
- [ ] Migrations generated & applied
- [ ] Seed: superuser (env), default roles & permissions, sample tenant, memberships
- [ ] Indexes for tenant_id and common filters

## Auth
- [ ] better-auth setup (register/login/logout/reset)
- [ ] Sessions (httpOnly) + refresh rotation
- [ ] Brute-force rate limit
- [ ] Superuser flag handled end-to-end

## Multi-Tenancy & RLS
- [ ] Tenant resolver middleware
- [ ] Transaction helper sets `app.tenant_id`
- [ ] RLS policies on all tenant tables
- [ ] Tests for isolation

## RBAC
- [ ] Permission matrix applied
- [ ] Role templates materialized on tenant creation
- [ ] Server & client guards implemented

## Modules
- [ ] Dashboard module (home, analytics stub, activity, settings, onboarding checklist)
- [ ] Identity (profile, sessions view/revoke)
- [ ] Tenancy (tenant CRUD, invite, member management, API keys)
- [ ] Authorization (roles/permissions view; edit in v0.2)
- [ ] Audit (list/filter)

## API & Interface
- [ ] Route handlers → application use-cases
- [ ] Zod validation; consistent error mapping
- [ ] Audit writes for important actions
- [ ] Idempotency for critical POSTs

## Observability & Security
- [ ] OTel HTTP & DB
- [ ] Sentry front/back
- [ ] Security headers (CSP nonce, HSTS, etc.)
- [ ] Rate limiting (per IP & tenant)
- [ ] PII redaction in logs

## Testing & CI
- [ ] Unit, Integration (testcontainers), E2E (Playwright)
- [ ] Coverage ≥ 80/75
- [ ] GitHub Actions pipeline (lint, typecheck, unit, integration, build, migrate dry-run)
- [ ] docs:sync in CI; fails on drift

## Docs
- [ ] Architecture Overview
- [ ] RLS Checklist
- [ ] Security Checklist
- [ ] Features Checklist
- [ ] QA Release Checklist
- [ ] ADRs 001–005
- [ ] Getting Started in README
```

---

## 17) QA Release Checklist (content for `docs/qa_release_checklist.md`)

```
# QA Release Checklist

- [ ] All env variables documented and present (.env.example)
- [ ] `pnpm i && pnpm migrate:push && pnpm seed && pnpm dev` works locally
- [ ] Superuser can switch tenants and access all pages
- [ ] Non-superuser cannot access other tenants' data
- [ ] RBAC hides forbidden menus and blocks API actions
- [ ] RLS tests pass for every tenant table
- [ ] Security headers present (verified via response inspector)
- [ ] Rate limiting triggers on abusive patterns
- [ ] Telemetry & Sentry receiving events
- [ ] ADRs up-to-date; docs synced (`pnpm docs:sync`)
```

---

## 18) Endpoints (subset, to implement)

* `POST /api/auth/register`, `POST /api/auth/login`, `POST /api/auth/logout`, `POST /api/auth/reset-request`, `POST /api/auth/reset-confirm`
* `GET /api/tenants`, `POST /api/tenants`, `PATCH /api/tenants/:id`, `DELETE /api/tenants/:id`
* `POST /api/tenants/:id/invitations`, `POST /api/invitations/:token/accept`
* `GET /api/tenants/:id/members`, `PATCH /api/tenants/:id/members/:memberId`
* `GET /api/roles`, `GET /api/permissions`, `GET /api/role-matrix`
* `POST /api/api-keys`, `GET /api/api-keys`, `DELETE /api/api-keys/:id`
* `GET /api/audit` (filter by actor/action/date)
* `GET /api/dashboard/overview`, `GET /api/dashboard/activity`, `GET /api/dashboard/settings`

All handlers must:

* Validate with **Zod**,
* Enforce **RBAC** (except auth),
* Write **audit logs** for mutating actions,
* Run within a **transaction** that sets `app.tenant_id`.

---

## 19) Scripts & Commands

Root `package.json`:

```json
{
  "scripts": {
    "dev": "turbo run dev --parallel",
    "build": "turbo run build",
    "lint": "turbo run lint",
    "typecheck": "turbo run typecheck",
    "test": "turbo run test",
    "test:unit": "turbo run test --filter=unit",
    "test:int": "turbo run test --filter=integration",
    "test:e2e": "turbo run test --filter=e2e",
    "migrate:generate": "pnpm -C packages/db drizzle-kit generate",
    "migrate:push": "pnpm -C packages/db drizzle-kit push",
    "seed": "tsx packages/db/seed.ts",
    "docs:sync": "tsx docs/sync.ts"
  }
}
```

`.env.example` must include:

```
DATABASE_URL=
SESSION_SECRET=
REDIS_URL=
SENTRY_DSN=
OTEL_EXPORTER_OTLP_ENDPOINT=
SUPERUSER_EMAIL=
SUPERUSER_NAME=
```

---

## 20) No-Hardcode Mandate (enforce in code review & tests)

* **Do not hardcode**:

  * tenant IDs, slugs, domains, origins, permission lists, role names, superuser emails, rate limit thresholds, CSP domains.
* All the above must be **stored in DB or env** and **referenced via config**.
* Add tests that **fail** if:

  * A known permission key is referenced but not present in `permissions` table.
  * `tenant_id` is accepted from client payload for tenant-scoped writes.

---

## 21) Definition of Done (v0.1)

* Auth flow works (register/login/logout/reset).
* Tenant create/switch, invite member, API keys, audit visible.
* Dashboard module renders (home/analytics stub/activity/settings).
* RLS enforced + isolation tests pass.
* RBAC enforced server & client (superuser full access via switch).
* CI green; docs & checklists present and synced.

---

## 22) Getting Started (README section)

* Provide step-by-step:

  1. `pnpm i`
  2. copy `.env.example` → `.env` and fill
  3. `pnpm migrate:push`
  4. `pnpm seed`
  5. `pnpm dev`
* Link to `/docs/*`.

---

## 23) Verification Steps (agent must run & report)

* Run local dev; sign in as superuser (from seed), create two tenants, invite a member.
* Confirm **superuser can switch tenants** and view all pages.
* Confirm **Member** cannot access Admin actions.
* Confirm audit entries written for create/update/delete.
* Run `pnpm test` (unit+integration+e2e).
* Run `pnpm docs:sync` and ensure **no drift**.
* Provide a summary at the end with:

  * repo tree (top levels),
  * list of routes created,
  * migrations applied,
  * how to switch tenants in UI.

---

**Deliverables**:

* Working monorepo with code, configs, migrations, seeds, tests, CI.
* `/docs` with all markdowns & CSV.
* Toolkit CLI for scaffolding new modules.
* A short summary in README + links to docs.

**Remember**: No hardcoding. Use dynamic, data-driven checks everywhere. Superuser has full access by context-switch, not by disabling RLS.

---

Good luck!
